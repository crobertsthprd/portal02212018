<cfcomponent>
	
	<cffunction name="SystemLock" output="yes" returntype="numeric">
		<cfargument name="_DSToLock" default="#dopsds#">
		
		<cfset var _SystemLock = '' />
		
		<cftry>
	
			<cfquery datasource="#_DSToLock#" name="_SystemLock">
				select   *
				from     systemlock
				for      update
			</cfquery>
	
			<cfreturn 1>
		<cfcatch>
			<!--- <BR><BR>
			<strong>Could not obtain database lock for required operation.<BR>
			<BR>If problem persists, contact IS.<BR>
			<input onClick="window.back()" type="button" value="Go Back And Try Again" class="GoButton">
			<cfabort> --->
			<cfreturn 0>
		</cfcatch>
		</cftry>
	
	</cffunction>
	
	<cffunction name="WhoAmI" output="Yes" description="Returns DEV, MASTER or SLAVE of DB">
		
		<cfset var WhoAmI = '' />
		
		<!---// while a method talking to application scope is not the
				most 'correct' way to do this, as it breaks encapsulation,
				I think this will be the best way to accomplish the goal
				of this particular method - Alagad //--->	
		<cfif not structKeyExists(application, "whoami") OR not len(application.whoami)>
			<cfquery name="WhoAmI" datasource="#dopsds#">
				select whoami() as whoami
			</cfquery>
			
			<cfset application.whoami = WhoAmI.whoami />
		</cfif>	
	
		<cfreturn application.whoami>
	</cffunction>
	
	<cffunction name="MonthsToYM">
		<cfargument required="Yes" name="MonthsToConvert" default="0" type="numeric">
		<cfargument required="No" name="Abbreviated" default="No" type="boolean">
		
		<cfset var _varYears = '' />
		<cfset var _varMonths = '' />
		<cfset var _varStr = '' />
		
		<cfset _VarYears = int(MonthsToConvert/12)>
		<cfset _VarMonths = MonthsToConvert - (_VarYears * 12)>
	
		<cfif Abbreviated is "Yes">
			<cfset _VarStr = ToString(_VarYears) & " yrs, " & ToString(_VarMonths) & " mths">
		<cfelse>
			<cfset _VarStr = ToString(_VarYears) & " years, " & ToString(_VarMonths) & " months">
		</cfif>
	
		<cfreturn _VarStr>
	</cffunction>
	
	<cffunction name="AssmtCredit" returntype="numeric">
	 <cfargument name="_type" required="Yes" type="string">
	 <cfargument name="_expires" required="Yes" type="date">
	
		<cfset var _assmtrefund = '' />
	
	 <cfset _assmtrefund = (ceiling(25/366*100)/100) * datediff("d",now(),_expires)>
	 
	 <cfif _type is "F">
	  <cfset _assmtrefund = _assmtrefund * 2>
	 </cfif>
	 
	 <cfreturn _assmtrefund>
	</cffunction>
	
	<cffunction name="GetRate" returntype="numeric">
	<!--- call by:
	GetRate(Mode,IDRegRate, IDSenRate, ODRegRate, ODSenRate, PrimaryPatronID, PatronDOB, BusinessCenterFac, BusinessCenterID, IsID, Start, End)
	Mode is either "R" or "P", denoting "registration or Passes
	For passes an additional column is selected instead of calculating value
	 --->
	<cfargument name="_Mode" required="Yes" type="string">
	<cfargument name="_IDRegRate" required="Yes" type="numeric">
	<cfargument name="_IDSenRate" required="Yes" type="numeric">
	<cfargument name="_ODRegRate" required="Yes" type="numeric">
	<cfargument name="_ODSenRate" required="Yes" type="numeric">
	<cfargument name="_PrimaryPatronID" required="Yes" type="numeric">
	<cfargument name="_PatronDOB" required="Yes" type="numeric">
	<cfargument name="_BusinessCenterFac" required="Yes" type="string">
	<cfargument name="_BusinessCenterID" required="Yes" type="string">
	<cfargument name="_IsID" required="Yes" type="numeric">
	<cfargument name="_Start" required="Yes" type="date">
	<cfargument name="_End" required="Yes" type="date">
	<cfargument name="_TermID" required="No" type="string">
	<cfargument name="_RegP1" required="No">
	<cfargument name="_SenP1" required="No">
	<cfargument name="_IsAssmtExempt" required="No" default="0" type="numeric">
	
	<cfset var _patronMonths = '' />
	<cfset var _IsSen = '' />
	<cfset var _getFacilitySCAge = '' />
	<cfset var _GetAssessmentPlan2Data = '' />
	<cfset var _GetSessionAssessmentData = '' />
	<cfset var _GetIDODScaler = '' />
	
	<cfquery datasource="#dopsds#" name="_GetFacilitySCAge">
	 select   scmonths
	 from     facilities
	 where    facid = '#_BusinessCenterFac#'
	</cfquery>
	
	<cfset _PatronMonths = datediff("M",_PatronDOB,_Start)>
	
	<cfif _PatronMonths gte _GetFacilitySCAge.scmonths>
	 <cfset _IsSen = 1>
	<cfelse>
	 <cfset _IsSen = 0>
	</cfif>
	
	<cfif _IsID is 1 and _IsSen is 0>
	 <cfreturn _IDRegRate>
	
	<cfelseif _IsID is 1 and _IsSen is 1>
	 <cfreturn _IDSenRate>
	
	<cfelseif _IsID is 0>
	
	 <cfquery datasource="#dopsds#" name="_GetAssessmentPlan2Data">
	  select distinct ASSMTPLAN
	  from allassessments
	  where primarypatronid = #_PrimaryPatronID#
	  and valid = true
	  and #CreateODBCDate(_Start)# >= ASSMTEFFECTIVEWG
	  and #CreateODBCDate(_Start)# <= ASSMTEXPIRESWG
	  <cfif IsDefined("_End") and _End is not "" and 1 is 2>
	   and #CreateODBCDate(_End)# >= ASSMTEFFECTIVEWG
	   and #CreateODBCDate(_End)# <= ASSMTEXPIRESWG
	  </cfif>
	 </cfquery>
	
	 <cfquery datasource="#dopsds#" name="_GetSessionAssessmentData">
	  select *
	  from sessionassessments
	  where primarypatronid = #_PrimaryPatronID#
	  and #CreateODBCDate(_Start)# >= ASSMTEFFECTIVE - grace::integer
	  and #CreateODBCDate(_Start)# <= ASSMTEXPIRES + grace::integer
	  <cfif IsDefined("_End") and _End is not "" and 1 is 2>
	   and #CreateODBCDate(_End)# >= ASSMTEFFECTIVE - grace::integer
	   and #CreateODBCDate(_End)# <= ASSMTEXPIRES + grace::integer
	  </cfif>
	 </cfquery>
	
	 <cfif ListFind(2,ValueList(_GetAssessmentPlan2Data.AssmtPlan)) is not 0 or _GetSessionAssessmentData.recordcount is not 0>
	  <!--- Plan 2 assessment --->
	  <cfif _IsSen is 1>
	   <cfreturn _ODSenRate>
	  <cfelse>
	   <cfreturn _ODRegRate>
	  </cfif>
	
	 <cfelseif IsAssmtExempt is 1>
	  <!--- assessmemt exempt rate --->
	  <cfif _IsSen is 1>
	   <cfreturn _ODSenRate>
	  <cfelse>
	   <cfreturn _ODRegRate>
	  </cfif>
	
	 <cfelseif ListFind(1,ValueList(_GetAssessmentPlan2Data.AssmtPlan)) is not 0>
	  <!--- Plan 1 assessment --->
	  <cfif _Mode is "R">
	   <!--- Registration Mode --->
	   <cfquery name="_GetIDODScaler" datasource="#dopsds#">
	    SELECT   IDTOPLAN1 
	    FROM     BUSINESSCENTERS 
	    WHERE    FACID = '#_BusinessCenterFac#'
	    AND      BUSINESSCENTERID = '#_BusinessCenterID#'
	   </cfquery>
	
	   <cfif _GetIDODScaler.recordcount is not 1>
	    <strong>Error in determining rate from GetIDODScaler. Contact IS.</strong>
	    <cfabort>
	   </cfif>
	
	   <!--- calculate Plan 1 rate --->
	   <cfif IsDefined("_TermID") and _TermID is "0509">
	    <!--- adjust to match brochure this term only --->
	    <cfif _IsSen is 1>
	     <cfreturn _SenP1>
	    <cfelse>
	     <cfreturn _RegP1>
	    </cfif>
	
	   <cfelse>
	
	    <cfif _IsSen is 1>
	     <cfreturn _IDSenRate * _GetIDODScaler.IDTOPLAN1>
	    <cfelse>
	     <cfreturn _IDRegRate * _GetIDODScaler.IDTOPLAN1>
	    </cfif>
	
	   </cfif>
	
	  </cfif>
	
	 <cfelse>
	  <!--- no assessment --->
	  <!--- <cfreturn _IDRegRate> --->
	
	  <cfif _IsSen is 1>
	   <cfreturn _ODSenRate>
	  <cfelse>
	   <cfreturn _ODRegRate>
	  </cfif>
	
	 </cfif>
	
	</cfif>
	 
	</cffunction>
	
	
	
	
	<cffunction name="GetAccountBalance" output="Yes" returntype="numeric">
	<cfargument name="_primary" required="Yes">
	
	<cfset var _GetAccountBalance = '' />
	
	<cfquery name="_GetAccountBalance" datasource="#dopsds#">
		select dops.primaryaccountbalance(#_primary#, current_date + 1) as NetBalance
	</cfquery>
	
	<cfreturn _GetAccountBalance.NetBalance>
	</cffunction>
	
	
	
	
	<cffunction name="DollarRound" output="Yes" returntype="numeric">
	<cfargument name="_value" required="No" type="numeric" default="0">
	<cfreturn round(_value * 100) / 100>
	</cffunction>
	
	
	
	
	<cffunction name="DurationWeeks">
	 <!--- 
	  process previously generated query
	  dt order must be in ascending order
	  _ColumnToUse is the column to evaluate
	  --->
	 <cfargument name="_QueryToUse" type="string" required="Yes">
	 <cfargument name="_ColumnToUse" type="string" required="Yes">
	 <cfargument name="_ReturnAsString" type="numeric" required="No" default="0">
	
		<cfset var _Duration = '' />
		<cfset var _LastWeek = '' />
		<cfset var _tmp = '' />
	
	
	 <cfset _Duration = 0>
	 <cfset _LastWeek = 0>
	
	 <cfloop query="#_QueryToUse#">
	  <cfset _tmp = week(evaluate(_ColumnToUse))>
	
	  <cfif _tmp is not _LastWeek>
	   <cfset _LastWeek = _tmp>
	   <cfset _Duration = _Duration + 1>
	  </cfif>
	
	 </cfloop>
	
	 <cfif _ReturnAsString is 1>
	  <cfset _Duration = _Duration & " Week(s)">
	 </cfif>
	
	 <cfreturn _Duration>
	</cffunction>
	
	
	
	
	<cffunction name="GetReturnQty" output="Yes" returntype="numeric">
		
		<cfset var _ReturnQty = '' />
	
	<cfquery datasource="#dopsds#ro" name="_ReturnQty" cachedwithin="#CreateTimeSpan(0, 0, 10, 0)#">
		select   varvalue
		from     dops.systemvars
		where    varname = 'WebClassSearchReturnQty'
	</cfquery>
	
	<cfif _ReturnQty.recordcount is 0>
		<cfreturn 5>
	<cfelse>
		<cfreturn _ReturnQty.varvalue>
	</cfif>
	
	</cffunction>
	
	
	
	
	<cffunction name="GetReturnQtyRegMode" output="Yes" returntype="numeric">
		
		<cfset var _ReturnQtyRegMode = '' />
	
	<cfquery datasource="#dopsds#ro" name="_ReturnQtyRegMode" cachedwithin="#CreateTimeSpan(0, 0, 10, 0)#">
		select   varvalue
		from     dops.systemvars
		where    varname = 'WebClassSearchReturnQtyRegMode'
	</cfquery>
	
	<cfif _ReturnQtyRegMode.recordcount is 0>
		<cfreturn 5>
	<cfelse>
		<cfreturn _ReturnQtyRegMode.varvalue>
	</cfif>
	
	</cffunction>
	
	
	
	
	<cffunction name="GetSessionid">
	<cfargument name="_PrimaryPatronID" required="Yes" type="numeric">
	
		<cfset var _CheckForCurrentSession = '' />
	
	<cfif not isDefined("CurrentSessionID")>
		<!--- check for already in session --->
		<cfquery datasource="#dopsds#" name="_CheckForCurrentSession">
			SELECT   sessionID, node, facid
			FROM     SessionPatrons
			where    PatronID = #_PrimaryPatronID#
			and      relationtype = 1
			limit    1
		</cfquery>
		
		<!--- check for thprd control --->
		<cfif _CheckForCurrentSession.RecordCount gt 0>
		
			<cfif _CheckForCurrentSession.facid is not "WWW" or _CheckForCurrentSession.node is not "W1">
				<cfreturn "">
			</cfif>
		
			<cfreturn _CheckForCurrentSession.SessionID>
		<cfelse>
			<cfreturn "">
		</cfif>
	
	<cfelse>
		<cfreturn CurrentSessionID>
	</cfif>
	
	</cffunction>
	
	
	
	<!--- 
	<cffunction name="GetNextInvoice" returntype="numeric">
		<cfargument name="_UseThisFac" type="string" default="WWW" required="No">
	
		<cfquery datasource="#request.reg_dsn#" name="GNI1">
			SELECT   InvoiceNumber as NI
			FROM     invoice
			WHERE    InvoiceFacID = '#_UseThisFac#'
			ORDER BY InvoiceNumber desc
			limit 1
		</cfquery>
	
		<cfset _NextInvoice = val(GNI1.NI) + 1>
	
		<cfquery datasource="#request.reg_dsn#" name="_CheckForThisInvoice">
			select   pk
			from     invoice
			where    invoicefacid = '#_UseThisFac#'
			and      invoicenumber = #_NextInvoice#
		</cfquery>
	
		<cfif _CheckForThisInvoice.recordcount gt 0>
			<cftransaction action="ROLLBACK">
			<strong>Error in fetching next invoice. Go back and try again.</strong>
			<cfabort>
		</cfif>
	
		<cfreturn _NextInvoice>
	</cffunction>
	 --->
	
	
	
	
	<cffunction name="GetNextInvoice" returntype="numeric">
		<cfargument name="_UseThisFac" type="string" default="" required="No">
		
		<cfset var _NextInvoice = '' />
		<cfset var e = '' />
		<cfset var f = '' />
		<cfset var h = '' />
		<cfset var n = '' />
		<cfset var GNI1 = '' />
		<cfset var _CheckForThisInvoice = '' />
		<cfset var GNI1A = '' />
		<cfset var GNI1B = '' />
		<cfset var GNI1C = '' />
		<cfset var GNI1D = '' />
		<cfset var GNI1E = '' />
		<cfset var GNI1F = '' />
		<cfset var GNI1G = '' />
		<cfset var GNI1H = '' />
		<cfset var GNI2 = '' />
	
		<cfquery datasource="#dopsds#" name="GNI1">
			SELECT   coalesce(InvoiceNumber) as NI
			FROM     invoice
			WHERE    InvoiceFacID = <cfif _UseThisFac is not "">'#_UseThisFac#'<cfelse>'#localfac#'</cfif>
			ORDER BY InvoiceNumber desc
			limit    1
		</cfquery>
	
		<cfset _NextInvoice = val(GNI1.NI)>
	
		<!--- disable for production --->
		<cfif 1 is 2>
	
			<cfquery datasource="#dopsds#" name="GNI1A">
				SELECT   coalesce(startinginvoice)  as NI
				FROM     facilities 
				WHERE    facid = <cfif _UseThisFac is not "">'#_UseThisFac#'<cfelse>'#localfac#'</cfif>
			</cfquery>
	
			<cfquery datasource="#dopsds#" name="GNI1B">
				SELECT   coalesce(InvoiceNumber) as NI
				FROM     activity
				WHERE    InvoiceFacID = <cfif _UseThisFac is not "">'#_UseThisFac#'<cfelse>'#localfac#'</cfif>
				ORDER BY InvoiceNumber desc
				limit 1
			</cfquery>
	
			<cfquery datasource="#dopsds#" name="GNI1C">
				SELECT   coalesce(InvoiceNumber) as NI
				FROM     gl
				WHERE    InvoiceFacID = <cfif _UseThisFac is not "">'#_UseThisFac#'<cfelse>'#localfac#'</cfif>
				ORDER BY InvoiceNumber desc
				limit 1
			</cfquery>
	
			<cfquery datasource="#dopsds#" name="GNI1D">
				SELECT   coalesce(InvoiceNumber) as NI
				FROM     assessments
				WHERE    InvoiceFacID = <cfif _UseThisFac is not "">'#_UseThisFac#'<cfelse>'#localfac#'</cfif>
				ORDER BY InvoiceNumber desc
				limit 1
			</cfquery>
	
			<cfquery datasource="#dopsds#" name="GNI1E">
				SELECT   coalesce(InvoiceNumber) as NI
				FROM     dropinhistory
				WHERE    FacID = <cfif _UseThisFac is not "">'#_UseThisFac#'<cfelse>'#localfac#'</cfif>
				AND      InvoiceNumber IS NOT NULL
				ORDER BY InvoiceNumber desc
				limit 1
			</cfquery>
	
			<cfif GNI1E.recordcount is not 0>
				<cfset e = GNI1E.NI>
			<cfelse>
				<cfset e = 0>
			</cfif>
	
			<cfquery datasource="#dopsds#" name="GNI1F">
				SELECT   coalesce(InvoiceNumber) as NI
				FROM     othercreditdatahistory
				WHERE    InvoiceFacID = <cfif _UseThisFac is not "">'#_UseThisFac#'<cfelse>'#localfac#'</cfif>
				AND      InvoiceNumber IS NOT NULL
				ORDER BY InvoiceNumber desc
				limit 1
			</cfquery>
	
			<cfif GNI1F.recordcount is not 0>
				<cfset f = GNI1F.NI>
			<cfelse>
				<cfset f = 0>
			</cfif>
	
			<cfquery datasource="#dopsds#" name="GNI1G">
				SELECT   coalesce(InvoiceNumber) as NI
				FROM     passes
				WHERE    InvoiceFacID = <cfif _UseThisFac is not "">'#_UseThisFac#'<cfelse>'#localfac#'</cfif>
				ORDER BY InvoiceNumber desc
				limit 1
			</cfquery>
	
			<cfquery datasource="#dopsds#" name="GNI1H">
				SELECT   coalesce(InvoiceNumber) as NI
				FROM     reservationpayments
				WHERE    InvoiceFacID = <cfif _UseThisFac is not "">'#_UseThisFac#'<cfelse>'#localfac#'</cfif>
				ORDER BY InvoiceNumber desc
				limit 1
			</cfquery>
	
			<cfif val(GNI1H.recordcount) is not 0>
				<cfset h = GNI1H.NI>
			<cfelse>
				<cfset h = 0>
			</cfif>
	
			<cfset n = max(val(GNI1.ni),MAX(val(GNI1A.ni),MAX(val(GNI1B.ni),max(val(GNI1C.ni),max(val(GNI1D.ni),max(e,max(f,max(val(GNI1G.ni),h))))))))>
			<cfset _NextInvoice = MAX(n,_NextInvoice)>
		</cfif>
	
		<cfset _NextInvoice = _NextInvoice + 1>
	
		<cfif _NextInvoice is 1>
	
			<cfquery datasource="#dopsds#" name="GNI2">
				SELECT   Facilities.StartingInvoice as NI
				FROM     Facilities
				WHERE    FacID = <cfif _UseThisFac is not "">'#_UseThisFac#'<cfelse>'#localfac#'</cfif>
			</cfquery>
	
			<cfif GNI2.recordcount is not 1>
				<BR><BR><BR><strong>Error in determining next invoice for this facility: <cfoutput>#_UseThisFac#</cfoutput>. Contact IS.</strong>
				<cfabort>
			</cfif>
	
			<cfset _NextInvoice = GNI2.NI>
		</cfif>
	
		<cfif _NextInvoice less than 2>
			<cftransaction action="ROLLBACK">
			<strong>Error in fetching next invoice. Contact IS.</strong>
			<cfabort>
		</cfif>
	
		<cfif 1 is 1>
	
			<cfquery datasource="#dopsds#" name="_CheckForThisInvoice">
				select pk
				from invoice
				where invoicefacid = <cfif _UseThisFac is not "">'#_UseThisFac#'<cfelse>'#localfac#'</cfif>
				and invoicenumber = #_NextInvoice#
			</cfquery>
		
			<cfif _CheckForThisInvoice.recordcount gt 0>
				<cftransaction action="ROLLBACK">
				<strong>Error in fetching next invoice. Go back and try again. (<cfoutput>#_NextInvoice#</cfoutput>)</strong>
				<cfabort>
			</cfif>
	
		</cfif>
	
		<cfreturn _NextInvoice>
	</cffunction>
	
	
	
	
	<!--- future version of GetNextEC() --->
	<cffunction name="GetNextEC" returntype="numeric">
		
		<cfset var _GetNextEC = '' />
	
		<cfquery datasource="#dopsds#" name="_GetNextEC">
			Select nextval('"dops"."sysec_pk_seq"') as tmp
		</cfquery>
	
		<cfreturn _GetNextEC.tmp>
	</cffunction>
	
	<cffunction name="Overlap" output="Yes" returntype="numeric" description="Checks for overlapping">
		<!--- returns 0 if no overlap, 1 if overlaps --->
		<!--- array format: --->
		<!--- v1, v2 --->
		<!--- v1, v2 --->
		<!--- v1, v2 --->
		<!--- ...... --->
		<cfargument name="_OArray" type="array" required="Yes">
		
		<cfset var _AssmtOverlap = '' />
		<cfset var _xa = '' />
		<cfset var _ya = '' />
		
		<cfset _AssmtOverlap = 0>
	
		<cfif ArrayLen(_OArray) gt 1>
			<!--- loop thru array to detect overlapping timeframes --->
			<cfloop from="1" to="#ArrayLen(_OArray)#" step="1" index="_xa">
	
				<cfloop from="1" to="#ArrayLen(_OArray)#" step="1" index="_ya">
	
					<cfif _xa is not _ya>
	
						<cfif isbetween(_OArray[_ya][1],_OArray[_xa][1],_OArray[_xa][2]) is 1>
							<cfset _AssmtOverlap = 1>
							<cfbreak>
						</cfif>
	
						<cfif isbetween(_OArray[_ya][2],_OArray[_xa][1],_OArray[_xa][2]) is 1>
							<cfset _AssmtOverlap = 1>
							<cfbreak>
						</cfif>
	
					</cfif>
	
				</cfloop>
	
				<cfif _AssmtOverlap is 1>
					<cfbreak>
				</cfif>
		
			</cfloop>
	
		</cfif>
	
		<cfreturn _AssmtOverlap>
	</cffunction>
	
	
	
	<cffunction name="isbetween">
		<cfargument name="_TestVal" required="Yes">
		<cfargument name="_BeginVal" required="Yes">
		<cfargument name="_EndVal" required="Yes">
		<cfargument name="_NotInclusive" required="No" type="numeric" default="0">
		
		<cfset var _tmp = '' />
		<cfset var _BeginBal = '' />
	
		<cfif _BeginVal gt _EndVal>
			<cfset _tmp = _EndVal>
			<cfset _EndVal = _BeginVal>
			<cfset _BeginVal = _tmp>
		</cfif>
	
		<cfif _NotInclusive is 1>
			<cfif _TestVal gt _BeginVal and _TestVal lt _EndVal>
				<cfreturn 1>
			<cfelse>
				<cfreturn 0>
			</cfif>
		<cfelse>
			<cfif _TestVal gte _BeginVal and _TestVal lte _EndVal>
				<cfreturn 1>
			<cfelse>
				<cfreturn 0>
			</cfif>
		</cfif>
	</cffunction>
	
	<cffunction name="tf" output="Yes" returntype="string">
		<cfargument name="_boolval" required="Yes" type="numeric">
		
		<cfif _boolval is 1>
			<cfreturn "true">
		<cfelse>
			<cfreturn "false">
		</cfif>
	
	</cffunction>
	
	
	
	
	<cffunction name="GetDistrictStatus" returntype="array">
		<!--- Usage: GetDistrictStatus(primarypatronid, householdmode, wrap, abbreviation, DistrictStat, InsufficientID, Verified) --->
		<!--- specifiy _primarypatronid as 0 if calling with other params: otherwise, primary will be seeked, DistrictStat, InsufficientID, Verified will be ignored--->
	
		<!--- returned array elements:
		_GetDistrictStatusArray[1] = ID/OD as 1 or 0
		_GetDistrictStatusArray[2] = Insufficient ID as 1 or 0>
		_GetDistrictStatusArray[3] = ID/OD Rate Determination as 1 or 0
		_GetDistrictStatusArray[4] = text as result
		_GetDistrictStatusArray[5] = color as [color]
		_GetDistrictStatusArray[6] = district status as weight 0=OD or unknown, 1=Ins, 2=Ver, 3=ID
		--->
	
		<cfargument name="_GetDistrictStatusPrimarypatronid" required="Yes" type="numeric">
	
		<!--- householdmode: 0=not in housegold mode, 1=in household mode --->
		<cfargument name="_GetDistrictHouseholdMode" required="No" type="numeric" default="0">
	
		<!--- wrap: 0=no wrap, 1 = wrat at --->
		<cfargument name="_GetDistrictStatusWrap" required="No" type="numeric" default="0">
	
		<!---  _abbreviation: 0=none, 1=short, 2=minimal--->
		<cfargument name="_GetDistrictStatusAbbreviation" required="No" type="numeric" default="0">
	
		<cfargument name="_GetDistrictStatusDistStatus" required="No" type="numeric" default="0">
		<cfargument name="_GetDistrictStatusInsufficientID" required="No" type="numeric" default="0">
		<cfargument name="_GetDistrictStatusVerified" required="No" type="numeric" default="0">
		
		<cfset var _GetDistrictStatusArray = '' />
		<cfset var _GetPrimaryDistrictStatus = '' />
		
		<cfset _GetDistrictStatusArray = ArrayNew(1)>
	
		<cfif _GetDistrictStatusPrimarypatronid gt 0>
	
			<cfquery datasource="#dopsds#" name="_GetPrimaryDistrictStatus">
		
				<cfif _GetDistrictHouseholdMode is 1>
					SELECT   indistrict, insufficientid, verified
					FROM     sessionpatrons
					WHERE    primarypatronid = #_GetDistrictStatusPrimarypatronid# 
					AND      relationtype = 1 
				<cfelse>
					SELECT   patronrelations.indistrict, patrons.insufficientid, patrons.verified
					FROM     patronrelations patronrelations
					         INNER JOIN patrons patrons ON patronrelations.primarypatronid=patrons.patronid 
					WHERE    patronrelations.primarypatronid = #_GetDistrictStatusPrimarypatronid# 
					AND      patronrelations.relationtype = 1 
				</cfif>
		
				limit 1
			</cfquery>
		
			<cfif _GetPrimaryDistrictStatus.recordcount is 1>
				<cfset _GetDistrictStatusDistStatus = _GetPrimaryDistrictStatus.indistrict>
				<cfset _GetDistrictStatusInsufficientID = _GetPrimaryDistrictStatus.insufficientid>
				<cfset _GetDistrictStatusVerified = _GetPrimaryDistrictStatus.verified>
			</cfif>
	
		</cfif>
	
		<!--- Ddetermine status --->
		<cfif _GetDistrictStatusDistStatus is 0>
			<cfset _GetDistrictStatusArray[1] = 0>
			<cfset _GetDistrictStatusArray[2] = 0>
	
			<cfif _GetDistrictStatusAbbreviation is 0>
				<cfset _GetDistrictStatusArray[4] = "Out of District">
			<cfelseif _GetDistrictStatusAbbreviation is 1>
				<cfset _GetDistrictStatusArray[4] = "Out of Dist">
			<cfelse>
				<cfset _GetDistrictStatusArray[4] = "OD">
			</cfif>
	
			<cfset _GetDistrictStatusArray[5] = "FF6666">
			<cfset _GetDistrictStatusArray[6] = 0>
	
		<cfelseif _GetDistrictStatusInsufficientID is 1>
			<cfset _GetDistrictStatusArray[1] = 0>
			<cfset _GetDistrictStatusArray[2] = 1>
	
			<cfif _GetDistrictStatusAbbreviation is 0>
				<cfset _GetDistrictStatusArray[4] = "In District (Insufficient Proof)">
			<cfelseif _GetDistrictStatusAbbreviation is 1>
				<cfset _GetDistrictStatusArray[4] = "In Dist (Ins Proof)">
			<cfelse>
				<cfset _GetDistrictStatusArray[4] = "Ins">
			</cfif>
	
			<cfset _GetDistrictStatusArray[5] = "FF9900">
			<cfset _GetDistrictStatusArray[6] = 1>
	
		<cfelseif _GetDistrictStatusVerified is 0>
			<cfset _GetDistrictStatusArray[1] = 1>
			<cfset _GetDistrictStatusArray[2] = 0>
	
			<cfif _GetDistrictStatusAbbreviation is 0>
				<cfset _GetDistrictStatusArray[4] = "In District (To Be Verified)">
			<cfelseif _GetDistrictStatusAbbreviation is 1>
				<cfset _GetDistrictStatusArray[4] = "In Dist (To Verify)">
			<cfelse>
				<cfset _GetDistrictStatusArray[4] = "Ver">
			</cfif>
	
			<cfset _GetDistrictStatusArray[5] = "00FFFF">
			<cfset _GetDistrictStatusArray[6] = 2>
		
		<cfelseif _GetDistrictStatusVerified is 1>
			<cfset _GetDistrictStatusArray[1] = 1>
			<cfset _GetDistrictStatusArray[2] = 0>
		
			<cfif _GetDistrictStatusAbbreviation is 0>
				<cfset _GetDistrictStatusArray[4] = "In District">
			<cfelseif _GetDistrictStatusAbbreviation is 1>
				<cfset _GetDistrictStatusArray[4] = "In Dist">
			<cfelse>
				<cfset _GetDistrictStatusArray[4] = "ID">
			</cfif>
	
			<cfset _GetDistrictStatusArray[5] = "Lime">
			<cfset _GetDistrictStatusArray[6] = 3>
	
		<cfelse>
			<cfset _GetDistrictStatusArray[1] = 0>
			<cfset _GetDistrictStatusArray[2] = 0>
	
			<cfif _GetDistrictStatusAbbreviation is 0>
				<cfset _GetDistrictStatusArray[4] = "Unknown">
			<cfelseif _GetDistrictStatusAbbreviation is 1>
				<cfset _GetDistrictStatusArray[4] = "Unk">
			<cfelse>
				<cfset _GetDistrictStatusArray[4] = "Unk">
			</cfif>
	
			<cfset _GetDistrictStatusArray[5] = "FF00FF">
			<cfset _GetDistrictStatusArray[6] = 0>
			
		</cfif>
	
		<!--- determine ID/OD Rate element value --->
		<cfif _GetDistrictStatusArray[1] is 1 and _GetDistrictStatusArray[2] is 0>
			<cfset _GetDistrictStatusArray[3] = 1>
		<cfelse>
			<cfset _GetDistrictStatusArray[3] = 0>
		</cfif>
	
		<cfif _GetDistrictStatusWrap is 1>
			<cfset _GetDistrictStatusArray[4] = replace(_GetDistrictStatusArray[4]," (","<BR>(")>
		</cfif>
	
		<!--- returned array elements:
		_GetDistrictStatusArray[1] = ID/OD as 1 or 0
		_GetDistrictStatusArray[2] = Insufficient ID as 1 or 0>
		_GetDistrictStatusArray[3] = ID/OD Rate Determination as 1 or 0
		_GetDistrictStatusArray[4] = text as result
		_GetDistrictStatusArray[5] = color as [color]
		_GetDistrictStatusArray[6] = district status as weight 0=OD or unknown, 1=Ins, 2=Ver, 3=ID
		--->
	
		<cfif IsDefined("debugvars")>
			<!--- display vars for debugging --->
			<cfoutput>
				GetDistrictStatus() vars:<BR>
				_GetDistrictStatusPrimarypatronid = #_GetDistrictStatusPrimarypatronid#<BR>
				_GetDistrictHouseholdMode = #_GetDistrictHouseholdMode#<BR>
				_GetDistrictStatusWrap = #_GetDistrictStatusWrap#<BR>
				_GetDistrictStatusAbbreviation = #_GetDistrictStatusAbbreviation#<BR>
				_GetDistrictStatusDistStatus = #_GetDistrictStatusDistStatus#<BR>
				_GetDistrictStatusInsufficientID = #_GetDistrictStatusInsufficientID#<BR>
				_GetDistrictStatusVerified = #_GetDistrictStatusVerified#<BR>
				<cfdump var="#_GetDistrictStatusArray#">
			</cfoutput>
	
		</cfif>
	
		<cfreturn _GetDistrictStatusArray>
	</cffunction>
	
	
	
	
	<cffunction name="IsInSession" output="Yes" returntype="numeric" access="public">
		<cfargument name="_patronid" required="Yes">
		<cfargument name="_SkipDropIn" required="No" default="0">
		
		<cfset var CheckForSession = '' />
		<cfset var CheckForDropinSession = '' />
	
		<cfquery datasource="#dopsds#" name="CheckForSession">
			select   exists(
			         select   pk
			         from     SESSIONPATRONS
			         where    patronid = #_patronid#
			         and      node != 'W1') as tmp
		</cfquery>	
	
		<cfif CheckForSession.tmp is 0 and _SkipDropIn is 0>
	
			<cfquery datasource="#dopsds#" name="CheckForDropinSession">
				select   exists(
				         select   pk
				         from     SESSIONDROPIN
				         where    patronid = #_patronid#) as tmp
			</cfquery>
	
		</cfif>
	
		<cfif _SkipDropIn is 1 and CheckForSession.tmp is 0>
			<cfreturn 0>
		<cfelseif CheckForSession.tmp is 0 and CheckForDropinSession.tmp is 0>
			<cfreturn 0>
		<cfelse>
			<cfreturn 1>
		</cfif>
	
	</cffunction>
	
	
	
	<!--- <cffunction name="FirstClassLevel" output="Yes" returntype="string">
	<cfargument name="_str">
	
	<cfif _str is "">
		<cfreturn "">
	</cfif>
	
	<cfreturn mid(_str,  2,  Find("-", _str, 3) - 2)>
	</cffunction>
	 --->
	
	
	<cffunction name="checksessioncount" returntype="boolean">
		
		<cfset var q = '' />
		<!---// Alagad TODO:  Is there any way to factor this away, or
				make it not run on every page request?  Not sure of the
				use case here, so unwilling to make changes //--->
		<CFQUERY name="q" datasource="#dopsds#">
		SELECT   varvalue::numeric > (
	         select   count(*)
	         from     sessionpatrons
	         where    facid = 'WWW'
	         and      relationtype = 1
	         ) AS theval
		FROM     dops.systemvars
		WHERE    varname = 'WebMaxSessions'
		</CFQUERY>
		<CFRETURN q.theval>
	</cffunction>
	
	
	<cffunction name="StringPad" output="Yes" returntype="string">
	<cfargument name="_var" required="Yes" type="string">
	<cfargument name="_count" required="Yes" type="numeric">
	<cfargument name="_chr" required="No" type="string" default="-">
	<cfreturn RepeatString(_chr,_count) & _var & RepeatString(_chr,_count)>
	</cffunction>
	
	<cffunction name="sqlquote" returntype="string" description="returns null or [str] as appropriate">
	 <cfargument name="_str" required="No" default="">
	 <!--- select mode of 1 returns SELECT syntax instead of INSERT / UPDATE syntax --->
	 <cfargument name="_selectmode" required="No" default="0">
	
	 <cfset _str = Replace(_str,"'","''","all")>
	 
	 <cfif _selectmode is 1>
	 
	  <cfif _str is "">
	   <cfreturn "is null"> 
	  <cfelse>
	   <cfreturn "= '" & _str & "'">
	  </cfif>
	 
	 <cfelse>
	 
	  <cfif ltrim(rtrim(_str)) is "">
	   <cfreturn "null"> 
	  <cfelse>
	   <cfreturn "'" & ltrim(rtrim(_str)) & "'">
	  </cfif>
	 
	 </cfif>
	 
	</cffunction>

</cfcomponent>